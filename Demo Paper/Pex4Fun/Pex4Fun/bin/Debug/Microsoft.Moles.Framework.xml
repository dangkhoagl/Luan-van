<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Moles.Framework</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehavedBase`2">
            <summary>
            Abstract base class for behaved implementations based on Moles.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="THolder">type that is assignable to T or to IInstanced&lt;T&gt;</typeparam>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehavedBase">
            <summary>
            Abstract base class for <see cref="T:Microsoft.Moles.Framework.Behaviors.IBehaved"/> implementations.
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.IBehaved">
            <summary>
            An instance holder that has a behavior
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.IBehaved.InstanceBehavior">
            <summary>
            Gets or sets the behavior that is used as a fallback mechanism.
            Common behaviors can be instantiated from the <see cref="T:Microsoft.Moles.Framework.BehavedBehaviors"/> 
            class.
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.INamed">
            <summary>
            A named instance
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.INamed.ShortName">
            <summary>
            Gets the short name. This method should not have any side effect.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.INamed.FullName">
            <summary>
            Gets the qualified name
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.Behaviors.BehavedBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.Behaviors.BehavedBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedBase.InitializeLifetimeService">
            <summary>
            Initailize lifetime to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedBase.BehaveAsNotImplemented">
            <summary>
            Assigns the NotImplemented behavior to this instance
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedBase.BehaveAsDefaultValue">
            <summary>
            Assigns the DefaultValue behavior to this instance
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedBase.ToString">
            <summary>
            Gets a string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedBase.InstanceBehavior">
            <summary>
            Gets or sets the default stub implementation.
            Returns DefaultStub.Current if not set.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedBase.ShortName">
            <summary>
            Gets the short name of this instance
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedBase.FullName">
            <summary>
            Gets the full name of this instance
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedBase.OwnerInstance">
            <summary>
            Gets the owner if any; might be a null reference.
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.IBehaved`1">
            <summary>
            An strongly typed instance holder that has a behavior
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Instances.IInstanced`1">
            <summary>
            A object that holds a runtime instance
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Moles.Framework.Instances.IInstanced">
            <summary>
            An object that holds a runtime instance, non-generic.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Instances.IInstanced.Instance">
            <summary>
            Gets the runtime instance
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Instances.IInstanced`1.Instance">
            <summary>
            Gets the runtime instance
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedBase`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the behaved
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedBase`2.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the behaved and wraps the runtime instance
            </summary>
            <param name="shortName">the instance short name</param>
            <param name="_instance">runtime instance, may be null</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedBase`2.op_Implicit(Microsoft.Moles.Framework.Behaviors.BehavedBase{`0,`1})~`0">
            <summary>
            Implicit conversion operator to the runtime instance
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedBase`2.Holder">
            <summary>
            Gets the underlying mole
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedBase`2.Instance">
            <summary>
            Gets the runtime instance
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3">
            <summary>
            A behaved collection of custom collection types. 
            Built on top of a BeavedCollection.
            </summary>
            <typeparam name="TItem">the collection item type</typeparam>
            <typeparam name="TCollection">the collection type</typeparam>
            <typeparam name="TCollectionHolder">the holder type of <typeparamref name="TCollection"/></typeparam>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.IValued">
            <summary>
            An instance that may hold a value
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.IValued.HasValue">
            <summary>
            Gets a value indicating if the instance holds a value
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.IBehavedCollection`1">
            <summary>
            A behaved collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.IBehavedCollection`1.SetEmpty">
            <summary>
            Sets the collection as empty
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.IBehavedCollection`1.SetOne(`0)">
            <summary>
            Sets a collection with one element
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.IBehavedCollection`1.SetAll(`0[])">
            <summary>
            Sets all the elements of the collection
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.IBehavedCollection`1.SetNext(`0)">
            <summary>
            Sets the next item
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.IBehavedCollection`1.Count">
            <summary>
            Gets or sets the count
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.#ctor(System.String)">
            <summary>
            Initializes a new instance of the collection
            </summary>
            <param name="shortName"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.#ctor(System.String,`1)">
            <summary>
            Initializes a new instance of the collection
            </summary>
            <param name="_instance">runtime instance</param>
            <param name="shortName"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.#ctor(System.String,`1,System.Predicate{`0})">
            <summary>
            Initinializes a new instance of the collection
            </summary>
            <param name="_instance">runtime instance</param>
            <param name="shortName"></param>
            <param name="_validator"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.#ctor(System.String,`1,System.Predicate{`0},Microsoft.Moles.Framework.MolesDelegates.Func{`0})">
            <summary>
            Initinializes a new instance of the collection
            </summary>
            <param name="_instance">runtime instance</param>
            <param name="shortName"></param>
            <param name="_validator">the validator for collection items</param>
            <param name="_factory">the factory for collection items</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.SetAny(`0)">
            <summary>
            Sets a value anywhere in the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.SetEmpty">
            <summary>
            Sets the collection state as empty
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.SetOne(`0)">
            <summary>
            Initializes the items of the collection to <paramref name="item"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.SetAll(`0[])">
            <summary>
            Initializes the items of the collection to <paramref name="items"/>.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.SetAll(Microsoft.Moles.Framework.Instances.IInstanced{`0}[])">
            <summary>
            Sets all the items of the collection as the instances
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.System#Collections#Generic#IList{TItem}#IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="value">item to search</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.System#Collections#Generic#IList{TItem}#Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.RemoveAt(System.Int32)">
            <summary>
            Removes the IList item at the specified index.
            </summary>
            <param name="index">index of the item to remove</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.GetItem(System.Int32)">
            <summary>
            Gets the element at position <paramref name="index"/>
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.SetItem(System.Int32,`0)">
            <summary>
            Sets the element <paramref name="value"/> at position <paramref name="index"/>.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.SetNext(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.Clear">
            <summary>
            Clears the list
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.Remove(`0)">
            <summary>
            Removes the first occurence of the item and returns a value indicating if
            an item was removed.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.GetEnumerator">
            <summary>
            Gets the enumerator for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.Items">
            <summary>
            Gets the underlying behaved collection
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.Item(System.Int32)">
            <summary>
            Gets or sets the element at index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.Count">
            <summary>
            Gets or sets the number of elements in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollectionBase`3.System#Collections#Generic#ICollection{TItem}#IsReadOnly">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1">
            <summary>
            A infinite sequence of values
            </summary>
            <typeparam name="T">the collection item type</typeparam>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String)">
            <summary>
            Initializes a new instance of the collection
            </summary>
            <param name="owner"></param>
            <param name="shortName"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String,System.Predicate{`0},Microsoft.Moles.Framework.MolesDelegates.OutFunc{`0,`0,System.Boolean},Microsoft.Moles.Framework.MolesDelegates.Func{`0,`0,System.Boolean})">
            <summary>
            Initinializes a new instance of the collection
            </summary>
            <param name="owner">owner of this collection</param>
            <param name="shortName">the short name of this instance</param>
            <param name="_validator"></param>
            <param name="_tryMoveNext">the delegate that provides the next value</param>
            <param name="_sequenceValidator">the delegate that is used to validate a sequence of values</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.Clear">
            <summary>
            Clears the list
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.MoveNext">
            <summary>
            Gets the next value and returns it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.Next">
            <summary>
            Gets the next value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.GetEnumerator">
            <summary>
            Gets the enumerator for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.ToString">
            <summary>
            Gets a string representation of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.Owner">
            <summary>
            Gets the behaved instance owning the collection
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.TryMoveNext">
            <summary>
            Gets or sets the next value factory delegate (might be null)
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.SequenceValidator">
            <summary>
            Gets or sets the sequence validator (might be null)
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.Count">
            <summary>
            Gets the number of elements in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.Current">
            <summary>
            Gets or sets the current value
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.DebugView">
            <summary>
            Gets a copy of the raw behaved values.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.HasValue">
            <summary>
            Gets a value indicating if the instance holds a value
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.InstanceBehavior">
            <summary>
            Gets the instance behavior
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.ShortName">
            <summary>
            Gets the short name of this instance
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSequence`1.FullName">
            <summary>
            Gets the full name of this instance
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidOperationException">
            <summary>
            Exception raised when an inconsistent operation on a behaved type was performed.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidOperationException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the behavior
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehavedInstancedBase">
            <summary>
            Behaved instance with an associated runtime instance
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedInstancedBase.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the behaved type
            </summary>
            <param name="shortName"></param>
            <param name="instance"></param>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedInstancedBase.Instance">
            <summary>
            Gets the runtime instance
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.INamer">
            <summary>
            An instance that can assign names
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.INamer.GetFullName(System.String)">
            <summary>
            Mangles a property name with own full name
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.Named">
            <summary>
            Helper class to create names. The methods in this class are protected.
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Behaviors.Named.IndexedFormat">
            <summary>
            The format to create indexed names
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Behaviors.Named.DereferenceFormat">
            <summary>
            Gets a membere dereference-like format
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.FromString(System.String)">
            <summary>
            Gets a named implementation that wraps the string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.Dereference(Microsoft.Moles.Framework.Behaviors.INamed,System.String)">
            <summary>
            Mangles a parent and a property to create a new named instance
            </summary>
            <param name="parent"></param>
            <param name="shortName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.TryGetCurrentMethod(Microsoft.Moles.Framework.Behaviors.INamed@)">
            <summary>
            Tries to get the current method name for a static instance method.
            </summary>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.TryGetCurrentMethod(System.Int32,Microsoft.Moles.Framework.Behaviors.INamed@)">
            <summary>
            Tries to get the current method name for a static instance method.
            </summary>
            <param name="skipFrameCount"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.TryGetCurrentMethod(Microsoft.Moles.Framework.Behaviors.INamed,Microsoft.Moles.Framework.Behaviors.INamed@)">
            <summary>
            Tries to get the current method name for an instance method.
            </summary>
            <param name="this"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.TryGetCurrentMethod(Microsoft.Moles.Framework.Behaviors.INamed,System.Int32,Microsoft.Moles.Framework.Behaviors.INamed@)">
            <summary>
            Tries to get the current method name for an instance method.
            </summary>
            <param name="this"></param>
            <param name="skipFrameCount"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.GetFullNameOrDefault(System.Object,System.String)">
            <summary>
            Gets the full name or the string value if any. Otherwise, returns the default name.
            </summary>
            <param name="name"></param>
            <param name="_defaultName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.GetFullName(System.Object,System.String)">
            <summary>
            Constructs the full name out of a owner-child pair
            </summary>
            <param name="_owner"></param>
            <param name="shortName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.GetFullName(System.Object,Microsoft.Moles.Framework.Behaviors.INamed)">
            <summary>
            Constructs the full name out of a owner-child pair
            </summary>
            <param name="_owner"></param>
            <param name="named"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.GetFullName(System.Object,System.String,System.String)">
            <summary>
            Constructs the full name out of an owner and a child
            </summary>
            <param name="_owner"></param>
            <param name="shortName"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.GetFullName(Microsoft.Moles.Framework.Behaviors.INamed)">
            <summary>
            Gets the full name of the name in a protected setting.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.GetIndexedFullName(System.Object,Microsoft.Moles.Framework.Behaviors.INamed)">
            <summary>
            Gets a indexer like name
            </summary>
            <param name="owner"></param>
            <param name="named"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.GetIndexedFullName(System.Object,System.String)">
            <summary>
            Gets a indexer like name
            </summary>
            <param name="owner"></param>
            <param name="shortName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.GetDereferenceFullName(System.Object,Microsoft.Moles.Framework.Behaviors.INamed)">
            <summary>
            Gets a member dereference like format
            </summary>
            <param name="owner"></param>
            <param name="named"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.GetDereferenceFullName(System.Object,System.String)">
            <summary>
            Gets a member dereference like format
            </summary>
            <param name="owner"></param>
            <param name="shortName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.Named.NamedDereference">
            <summary>
            Gets a named property
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.NamedDereference.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="named"></param>
            <param name="shortName"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Named.NamedDereference.ToString">
            <summary>
            Gets a string representation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.Named.NamedDereference.ShortName">
            <summary>
            Gets the short name
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.Named.NamedDereference.FullName">
            <summary>
            Gets the full name
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.NamedBehaved">
            <summary>
            A simple behaved instance
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.NamedBehaved.#ctor(System.String)">
            <summary>
            Initialzies a new instance of the class
            </summary>
            <param name="shortName"></param>
        </member>
        <member name="T:Microsoft.Moles.Engine.IMolesAssemblyCache">
            <summary>
            A manager for cached moles assemblies
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesAssemblyCache.AddAssembly(System.String,System.Version,System.String,System.String)">
            <summary>
            Adds an assembly to the cache (might require elevated rights)
            </summary>
            <param name="assemblyName"></param>
            <param name="version"></param>
            <param name="_publicKeyToken"></param>
            <param name="molesAssemblyFile"></param>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesAssemblyCache.TryGetAssemblies(System.String,System.Version,System.String,Microsoft.ExtendedReflection.Collections.IIndexable{System.String}@)">
            <summary>
            Tries to get all the moles assemblies associated to a particular assembly
            </summary>
            <param name="assemblyName"></param>
            <param name="version"></param>
            <param name="_publicKeyToken"></param>
            <param name="assemblyFileNames"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Engine.IMolesAssemblyCache.RootDirectory">
            <summary>
            Get the cache root directory
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesEraseFinalizerAttribute">
            <summary>
            Attribute that specifices that the finalizer of a given type should be erased.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesEraseFinalizerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.MolesEraseFinalizerAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesEraseFinalizerAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.MolesEraseFinalizerAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesEraseFinalizerAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.MolesEraseFinalizerAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Microsoft.Moles.Framework.MolesEraseFinalizerAttribute.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="T:Microsoft.Moles.Data.MolesElement">
            <remarks/>
        </member>
        <member name="M:Microsoft.Moles.Data.MolesElement.CreateDefault">
            <summary>
            Creates a default Stbus element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Data.MolesElement.GetOutputAssemblyName">
            <summary>
            Gets the assembly name from the Compilation element, or the default
            naming scheme
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.Assembly">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.CodeStyle">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.StubGeneration">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.MoleGeneration">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.Compilation">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.DisableCache">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.CachePath">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.LibraryPath">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.Diagnostic">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.DiagnosticSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.Verbosity">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.VerbositySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.Timestamp">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.TimestampSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MolesElement.NamespaceUri">
            <summary>
            Get the xml namespce of the Moles schema
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Data.AssemblyElement">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.AssemblyElement.Name">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.AssemblyElement.Location">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.AssemblyElement.ReflectionOnly">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.AssemblyElement.ReflectionOnlySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.AssemblyElement.x86">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.AssemblyElement.x86Specified">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.AssemblyElement.ExportedTypes">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.AssemblyElement.ExportedTypesSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.CompilationPropertyElement">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationPropertyElement.Name">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationPropertyElement.Condition">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationPropertyElement.Value">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.CompilationCOMReferenceElement">
            <remarks/>
        </member>
        <member name="M:Microsoft.Moles.Data.CompilationCOMReferenceElement.TryParse(System.String,Microsoft.Moles.Data.CompilationCOMReferenceElement@,System.String@)">
            <summary>
            Tries to parse the COM reference information from a string that is formatted as
            name\guid\major.minor\cultureid\wrapper
            </summary>
            <param name="value"></param>
            <param name="cr"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationCOMReferenceElement.Guid">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationCOMReferenceElement.VersionMajor">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationCOMReferenceElement.VersionMinor">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationCOMReferenceElement.WrapperTool">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.CompilationReferenceElement">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationReferenceElement.FullName">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationReferenceElement.Path">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.CompilationElement">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationElement.Reference">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationElement.COMReference">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationElement.Property">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationElement.DisableCodeContracts">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationElement.AssemblyName">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationElement.KeyFile">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationElement.Debug">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CompilationElement.ProjectTemplate">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.TypeFilterElementBase">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.TypeFilterElementBase.Namespace">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.TypeFilterElementBase.TypeName">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.TypeFilterElementBase.ExcludedNamespace">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.TypeFilterElementBase.ExcludedTypeName">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.TypeFilterElementBase.SkipObsolete">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.TypeFilterElementBase.SkipObsoleteSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.MoleTypeFilterElement">
            <remarks/>
        </member>
        <member name="M:Microsoft.Moles.Data.MoleTypeFilterElement.ToFilter">
            <summary>
            Converts the current element to a type filter
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Data.StubTypeFilterElement">
            <remarks/>
        </member>
        <member name="M:Microsoft.Moles.Data.StubTypeFilterElement.ToFilter">
            <summary>
            Converts the current element to a type filter
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterElement.SkipInterfaces">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterElement.SkipInterfacesSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterElement.SkipClasses">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterElement.SkipClassesSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterElement.AbstractClasses">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterElement.AbstractClassesSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.TypeSelectorElementBase">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.TypeFilterSelectorElementBase">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.TypeFilterSelectorElementBase.Namespace">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.TypeFilterSelectorElementBase.TypeName">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.TypeFilterSelectorElementBase.FullName">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.MoleRemoveTypeSelectorElement">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MoleRemoveTypeSelectorElement.Obsolete">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MoleRemoveTypeSelectorElement.ObsoleteSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.MoleAddTypeSelectorElement">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.StubTypeFilterSelectorElementBase">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterSelectorElementBase.AbstractClasses">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterSelectorElementBase.AbstractClassesSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterSelectorElementBase.Interfaces">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterSelectorElementBase.InterfacesSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterSelectorElementBase.Classes">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubTypeFilterSelectorElementBase.ClassesSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.StubRemoveTypeSelectorElement">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubRemoveTypeSelectorElement.Obsolete">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubRemoveTypeSelectorElement.ObsoleteSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.StubAddTypeSelectorElement">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.ClearTypeSelectorElement">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.CodeGenerationElementBase">
            <remarks/>
        </member>
        <member name="M:Microsoft.Moles.Data.CodeGenerationElementBase.ToFilter">
            <summary>
            Creates the type filter
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Data.CodeGenerationElementBase.Disable">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CodeGenerationElementBase.TypeNameFormatString">
            <summary>
            Gets the format string to create the type short name
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Data.MoleGenerationElement">
            <remarks/>
        </member>
        <member name="M:Microsoft.Moles.Data.MoleGenerationElement.CreateDefault">
            <summary>
            Creates the default instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Data.MoleGenerationElement.ToFilter">
            <summary>
            Converts the current stubs element to a filter
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Data.MoleGenerationElement.Types">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.MoleGenerationElement.TypeFilter">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.StubGenerationElement">
            <remarks/>
        </member>
        <member name="M:Microsoft.Moles.Data.StubGenerationElement.CreateDefault">
            <summary>
            Creates the default instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Data.StubGenerationElement.ToFilter">
            <summary>
            Converts the current stubs element to a filter
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Data.StubGenerationElement.Types">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubGenerationElement.TypeFilter">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubGenerationElement.SkipVirtualMethods">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubGenerationElement.SkipVirtualMethodsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubGenerationElement.SkipVirtualIndexers">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.StubGenerationElement.SkipVirtualIndexersSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.FileHeaderElement">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.FileHeaderElement.Value">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.CopyrightElement">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CopyrightElement.Value">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.CodeStyleElement">
            <remarks/>
        </member>
        <member name="M:Microsoft.Moles.Data.CodeStyleElement.CreateDefault">
            <summary>
            Creates a default CodeGeneration element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Data.CodeStyleElement.WriteComment(System.IO.TextWriter)">
            <summary>
            Writes the code style header
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.Moles.Data.CodeStyleElement.Copyright">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CodeStyleElement.FileHeader">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CodeStyleElement.MaxIdentifierLength">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CodeStyleElement.AssemblyAlias">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CodeStyleElement.DisableUniqueAlias">
            <remarks/>
        </member>
        <member name="P:Microsoft.Moles.Data.CodeStyleElement.DisableUniqueAliasSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Data.LogEventLevel">
            <remarks/>
        </member>
        <member name="F:Microsoft.Moles.Data.LogEventLevel.Critical">
            <remarks/>
        </member>
        <member name="F:Microsoft.Moles.Data.LogEventLevel.Error">
            <remarks/>
        </member>
        <member name="F:Microsoft.Moles.Data.LogEventLevel.Warning">
            <remarks/>
        </member>
        <member name="F:Microsoft.Moles.Data.LogEventLevel.Message">
            <remarks/>
        </member>
        <member name="F:Microsoft.Moles.Data.LogEventLevel.Verbose">
            <remarks/>
        </member>
        <member name="F:Microsoft.Moles.Data.LogEventLevel.Noisy">
            <remarks/>
        </member>
        <member name="T:Microsoft.Moles.Engine.IMolesOptions">
            <summary>
            Gets the build options, not part of the stubx file
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.IMolesOptions.OutputPath">
            <summary>
            Gets the output path
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.IMolesOptions.Cache">
            <summary>
            Gets a value indicating the output should be layed as a cache
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.IMolesOptions.IntermediatePath">
            <summary>
            Gets the intermediate path root
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.IMolesOptions.CleanIntermediatePath">
            <summary>
            Gets a value indicating if the intermediate path should be cleaned up compilation end
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.IMolesOptions.CompilationHash">
            <summary>
            Gets a string identifying the last compilation
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.IMolesOptions.AssemblyHash">
            <summary>
            Gets a string identifying the metadata signatures in the assembly
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.IMolesOptions.ToolsVersion">
            <summary>
            Gets the tools version, 2.0, 3.5 or 4.0
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.IMolesOptions.TargetFrameworkVersion">
            <summary>
            Gets the target framework version, 2.0, 3.5 or 4.0
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.IMolesOptions.ForceReadOnly">
            <summary>
            Forces readonly files
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.IMolesOptions.ForceGeneration">
            <summary>
            Forces re-generation
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Engine.MolesEnvironmentSettings">
            <summary>
            Environment variables supporting the moles engine
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Engine.MolesEnvironmentSettings.ApplicationDirectory">
            <summary>
            Pex application base directory
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Engine.MolesExecutionMonitor">
            <summary>
            The execution monitor used by Moles
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Engine.MolesExecutionMonitor.CreateThreadExecutionMonitor(System.Int32)">
            <summary>
            Creates a new empty execution monitor for a particular thread
            </summary>
            <param name="threadId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Engine.MolesInstallHelper">
            <summary>
            Installation helper classes
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesInstallHelper.SetApplicationAssembly(System.Reflection.Assembly)">
            <summary>
            Sets the application directory
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesInstallHelper.GetTargetsDirectory">
            <summary>
            Gets the targets directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesInstallHelper.GetInstallationDirectory">
            <summary>
            Gets the installation directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesInstallHelper.GetMolesConsoleApplication(Microsoft.ExtendedReflection.Monitoring.Bitness)">
            <summary>
            Gets the moles console code generator application
            </summary>
            <param name="bitness"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesInstallHelper.GetRunnerConsoleApplication(Microsoft.ExtendedReflection.Monitoring.Bitness)">
            <summary>
            Gets the moles stand alone runner application
            </summary>
            <param name="runnerBitness"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesInstallHelper.GetPlatformBinariesDirectory(System.Boolean)">
            <summary>
            Gets the binaries directory related to silverlight or the desktop clr.
            </summary>
            <param name="silverlight"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesInstallHelper.GetBinariesDirectory">
            <summary>
            Gets the binaries directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesInstallHelper.GetCacheDirectory">
            <summary>
            Gets the cache root directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesInstallHelper.GetSilverlightBinariesDirectory">
            <summary>
            Gets the public silverlight binarires directory
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesInstallHelper.ApplicationDirectory">
            <summary>
            Gets or sets the apploication directory
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesInstallHelper.IsInstalled">
            <summary>
            Gets a value indicating whether Pex is installed.
            </summary>
            <value>
            	<c>true</c> if this instance is installed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Microsoft.Moles.Framework.Engine.MolesMetadata">
            <summary>
            Stubs metadata
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Engine.MolesMetadata.NamespaceSuffix">
            <summary>
            suffix appended to namespaces, excluding the leading dot
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Engine.MolesMetadata.AssemblyNameSuffix">
            <summary>
            suffix appended to assembly names
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Engine.MolesMetadata.MolesFileExtension">
            <summary>
            Moles xml file extension
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Engine.MolesMetadata.BehaviorAssemblyNameSuffix">
            <summary>
            Suffix used to create behavior assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Engine.MolesMetadata.BehaveAsNotImplementedMethodName">
            <summary>
            Gets the method name of the BehaveAsNotImplemented method
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Engine.MolesMetadata.BehaveAsCurrentMethodName">
            <summary>
            Gets the method name of the BehavedAsCurrent method
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Engine.MolesMetadata.MolesFrameworkAssembly">
            <summary>
            Microsoft.Moles.Framework assembly name
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Engine.MolesMetadata.InstrumentAssemblyName">
            <summary>
            Attribute that specifies that a type or module should be instrument
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Engine.MolesMetadata.MayBeAMolesAssembly(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Gets a value indicating if the assembly may be a compiled stubs assembly
            using name matching.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Engine.MolesMetadata.MayBeAMolesAssembly(System.String)">
            <summary>
            Gets a value indicating if the assembly may be a compiled stubs assembly
            using name matching.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Engine.MolesMetadata.MayBeAMolesAssemblyFile(System.String)">
            <summary>
            Gets a value indicating if the assembly file may be a compiled Moles assembly
            using name matching.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Engine.MolesMetadata.GetMoleNamespace(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference)">
            <summary>
            Constructs the target namespace for mole and stub types
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Engine.MolesArgumentCategory">
            <summary>
            Contains the logging categories
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Engine.MolesArgumentCategory.Main">
            <summary>
            Main options
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Engine.MolesArgumentCategory.Diagnostics">
            <summary>
            Diagnostics options
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Engine.MolesArgumentCategory.Filtering">
            <summary>
            Filtering options
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Engine.MolesArgumentCategory.Compilation">
            <summary>
            Compilation options
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Engine.MolesArgumentCategory.Caching">
            <summary>
            Caching options
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Engine.MolesOptions">
            <summary>
            Base option class for the Moles code generated
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesOptions.#ctor">
            <summary>
            Initializes a new instance of the options class
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesOptions.Microsoft#Moles#Engine#IMolesOptions#get_TargetFrameworkVersion">
            <summary>
            Base option class for the Moles code generated
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesOptions.OutputPath">
            <summary>
            Gets or sets the output path
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesOptions.Cache">
            <summary>
            A value indicating
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesOptions.CachePath">
            <summary>
            Gets or sets the intermediate output path
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesOptions.IntermediatePath">
            <summary>
            Gets or sets the intermediate output path
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesOptions.ForceIntermediatePath">
            <summary>
            Gets a value that forces to use the intermadiate path without creating a nested folder
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesOptions.CleanIntermediatePath">
            <summary>
            Gets or sets a value indicating that the intermediate path should be cleaned
            once the compilation is finished
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesOptions.CompilationHash">
            <summary>
            Gets a string identifying the last compilation
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesOptions.AssemblyHash">
            <summary>
            Gets the hash code of the visible metadata signatures of the assembly
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesOptions.ToolsVersion">
            <summary>
            Gets or sets the compilation Tools Version
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesOptions.ForceReadOnly">
            <summary>
            Gets or sets the a value to override any pre-existing files
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Engine.MolesOptions.ForceGeneration">
            <summary>
            Gets or sets a value that forces generation and skips filestamp and hash checks
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Instances.InstancedPool">
            <summary>
            A type that contains a map from instance to potential behaved.
            </summary>
            <remarks>
            The instances and behaved are stored as weak references.
            </remarks>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedPool.Clear">
            <summary>
            Clears the map of behaved
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedPool.GetInstancedObjects">
            <summary>
            Queries all registered objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedPool.RegisterInstanced(Microsoft.Moles.Framework.Instances.IInstanced)">
            <summary>
            Registers a behaved and its instance
            </summary>
            <param name="instanced"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedPool.GetInstancedOrSelf(System.Object)">
            <summary>
            Gets the behaved for instance, or returns the instance itself.
            </summary>
            <param name="_instance">instance may be null</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedPool.TryGetInstanced``1(System.Object,``0@)">
            <summary>
            Tries to retreive the behaved for a given runtime instace
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="instanced"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedPool.TryGetInstanced(System.Object,Microsoft.Moles.Framework.Instances.IInstanced@)">
            <summary>
            Tries to retrieve the behaved for a given runtime instance
            </summary>
            <param name="instance"></param>
            <param name="instanced"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedPool.CastAsInstance``2(``0)">
            <summary>
            Extracts the runtime type from the instanced object
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedPool.CastAsInstanced``2(``0)">
            <summary>
            Tries to recover the instanced type from the runtime type
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1">
            <summary>
            A collection with a behavior and lazy validation.
            </summary>
            <typeparam name="T">the collection item type</typeparam>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String)">
            <summary>
            Initializes a new instance of the collection
            </summary>
            <param name="owner"></param>
            <param name="shortName"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String,System.Predicate{`0})">
            <summary>
            Initinializes a new instance of the collection
            </summary>
            <param name="owner">owner of this collection</param>
            <param name="shortName">the short name of this instance</param>
            <param name="_validator"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String,System.Predicate{`0},Microsoft.Moles.Framework.MolesDelegates.Func{`0})">
            <summary>
            Initinializes a new instance of the collection
            </summary>
            <param name="owner">owner of this collection</param>
            <param name="shortName">the short name of this instance</param>
            <param name="_validator"></param>
            <param name="_factory">A factory for the collection elements</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="value">item to search</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the IList item at the specified index.
            </summary>
            <param name="index">index of the item to remove</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.GetItem(System.Int32)">
            <summary>
            Gets the element at position <paramref name="index"/>
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Sets the element <paramref name="value"/> at position <paramref name="index"/>.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.SetAny(`0)">
            <summary>
            Sets a value anywhere in the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.SetNext(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.SetNextRange(`0[])">
            <summary>
            Adds an array of items to the collection.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.SetNext">
            <summary>
            Gets a value from the behavior and adds it to the solution
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.SetEmpty">
            <summary>
            Sets the collection state as empty
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.SetOne(`0)">
            <summary>
            Sets the collection state to a single element
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.SetAll(`0[])">
            <summary>
            Sets the all the items of the collection
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.SetAll(Microsoft.Moles.Framework.Instances.IInstanced{`0}[])">
            <summary>
            Sets all the items of the collection as the instances
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.Clear">
            <summary>
            Clears the list
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.Remove(`0)">
            <summary>
            Removes the first occurence of the item and returns a value indicating if
            an item was removed.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.ToArray">
            <summary>
            Copies the content to an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.ToString">
            <summary>
            Gets a string representation of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.Owner">
            <summary>
            Gets the behaved instance owning the collection
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.Initialized">
            <summary>
            Gets a value indicating if the initial state of the collection has been initialized.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.Factory">
            <summary>
            Gets or sets the item factory
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.Count">
            <summary>
            Gets or sets the number of elements in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.IsReadOnly">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.DebugViewValues">
            <summary>
            Gets a copy of the raw behaved values.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.HasValue">
            <summary>
            Gets a value indicating if the instance holds a value
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.InstanceBehavior">
            <summary>
            Gets the instance behavior
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.ShortName">
            <summary>
            Gets the short name of this instance
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedCollection`1.FullName">
            <summary>
            Gets the full name of this instance
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2">
            <summary>
            A behaved dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String)">
            <summary>
            Initializes a new instance of the dictionary
            </summary>
            <param name="owner"></param>
            <param name="shortName"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String,System.Predicate{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the dictionary
            </summary>
            <param name="owner"></param>
            <param name="shortName"></param>
            <param name="_validator"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String,System.Predicate{System.Collections.Generic.KeyValuePair{`0,`1}},Microsoft.Moles.Framework.MolesDelegates.Func{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the dictionary
            </summary>
            <param name="owner"></param>
            <param name="shortName"></param>
            <param name="_validator"></param>
            <param name="_factory"></param>
            <param name="_equalityComparer"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element to the dictionary
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.TryAdd(`0,`1)">
            <summary>
            Adds the pair if key is not already present in the dictionary;
            otherwise returns false
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.ContainsKey(`0)">
            <summary>
            Gets a value indicating if the key is in the dictionary
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.ContainsValue(`1)">
            <summary>
            Gets a value indicating if the collection contains the value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.Remove(`0)">
            <summary>
            Removes the key from the dictionary
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value at key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.GetValueOrDefault(`0)">
            <summary>
            Gets the value at key or null.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.GetValueOrThrow``1(`0)">
            <summary>
            Gets a value or throws a TException
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.GetValue(`0)">
            <summary>
            Gets the value at key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value at key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.SetAll(System.Collections.Generic.KeyValuePair{`0,`1}[])">
            <summary>
            Sets the state of the dictionary
            </summary>
            <param name="entries"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.SetAll(`0[],`1[])">
            <summary>
            Sets the state of the dictionary. Keys and values are zipped in the dictionary
            </summary>
            <param name="keys">array of keys</param>
            <param name="values">array of values</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.SetOne(`0,`1)">
            <summary>
            Sets the state of the dictionary as one key value pair
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.SetOne(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Sets the state of the dictionary as one key value pair
            </summary>
            <param name="kv"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.SetEmpty">
            <summary>
            Sets the dictionary as empty
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.Clear">
            <summary>
            Clears the items
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.SetNext(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the item to the dictionary
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.SetNext(`0,`1)">
            <summary>
            Adds the item to the dictionary
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.GetEnumerator">
            <summary>
            Gets the item enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.GetDictionaryEnumerator">
            <summary>
            Gets a non-generic enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.ToString">
            <summary>
            Gets the string representation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.DebugViewValues">
            <summary>
            Gets the behaved items
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.Factory">
            <summary>
            Gets or sets the factory
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.Keys">
            <summary>
            Gets the key collection
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.Values">
            <summary>
            Gets the value collection
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.Item(`0)">
            <summary>
            Gets or sets a value at a given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.Count">
            <summary>
            Gets or sets the number of elements in the dictionary
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.IsReadOnly">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.HasValue">
            <summary>
            Gets a value indicating if the instance holds a value
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.InstanceBehavior">
            <summary>
            Gets the instance behavior
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.ShortName">
            <summary>
            Gets the short name
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.FullName">
            <summary>
            Gets the full name
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.KeyCollection">
            <summary>
            Dictionary key collection
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.KeyCollection.Contains(`0)">
            <summary>
            Gets a value indicating if the key is contained
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the keys to an array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            Gets the key enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.KeyCollection.Count">
            <summary>
            Gets the key count
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.ValueCollection">
            <summary>
            Gets the value collection
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.ValueCollection.Contains(`1)">
            <summary>
            Gets a value indicating if the value is in the dictionary
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the values to the array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            Gets the enumerator of values
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedDictionary`2.ValueCollection.Count">
            <summary>
            Gets the number of elements in the dictionary
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehavedSet`1">
            <summary>
            A behaved set collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String)">
            <summary>
            Initializes a new instance of the set
            </summary>
            <param name="owner"></param>
            <param name="shortName"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String,System.Predicate{`0})">
            <summary>
            Initializes a new instance of the set
            </summary>
            <param name="owner"></param>
            <param name="_validator"></param>
            <param name="shortName"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String,System.Predicate{`0},Microsoft.Moles.Framework.MolesDelegates.Func{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the set
            </summary>
            <param name="owner"></param>
            <param name="shortName">the short name of this instance</param>
            <param name="_validator"></param>
            <param name="_factory"></param>
            <param name="_equalityComparer"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.Add(`0)">
            <summary>
            Adds the item to the set and returns a value indicating
            if it was added.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.Clear">
            <summary>
            Clears the set
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.Contains(`0)">
            <summary>
            Gets a value indicating if the item is in the set
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements to the array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.Remove(`0)">
            <summary>
            Removes the element from the set; returns a value
            indicating if the element was actually removed
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.SetAll(`0[])">
            <summary>
            Sets the entire state of the set
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.SetEmpty">
            <summary>
            Sets the set as empty
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.SetOne(`0)">
            <summary>
            Sets the entire state as one item
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.SetNext(`0)">
            <summary>
            Adds the next item in the behaved set
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.SetAll(Microsoft.Moles.Framework.Instances.IInstanced{`0}[])">
            <summary>
            Sets all the items of the collection as the instances
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.GetEnumerator">
            <summary>
            Gets the element enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.ToString">
            <summary>
            Gets the string representation of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.DebugViewValues">
            <summary>
            Gets the internal behaved collection. To display values in debugger
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.Factory">
            <summary>
            Gets or sets the factory
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.Count">
            <summary>
            Gets the number of elements in the set
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.IsReadOnly">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.HasValue">
            <summary>
            Gets a value indicating if the instance holds a value
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.InstanceBehavior">
            <summary>
            Gets the instance behavior
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.ShortName">
            <summary>
            Gets the short name
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedSet`1.FullName">
            <summary>
            Get the full name
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehaviorValueExceptionBase">
            <summary>
            An exception thrown from a behaved instance with respect to a value
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorValueExceptionBase.TryGetMethodDefinition(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName@)">
            <summary>
            Tries to get the caller method definition
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorValueExceptionBase.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorValueExceptionBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorValueExceptionBase.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorValueExceptionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidValueException">
            <summary>
            An exception raised when an invalid property value was assigned.
            This exception is treated as an assumption by Pex.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidValueException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidValueException.Create(System.String,System.Object[])">
            <summary>
            Create a new exception
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidValueException.Message">
            <summary>
            Gets a detailled error message
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehavedValue`1">
            <summary>
            A place holder for property values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String,System.Predicate{`0},Microsoft.Moles.Framework.MolesDelegates.Func{`0},`0)">
            <summary>
            Initializes a new instance of the value
            </summary>
            <param name="owner"></param>
            <param name="shortName"></param>
            <param name="_validator"></param>
            <param name="_factory"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String,System.Predicate{`0},Microsoft.Moles.Framework.MolesDelegates.Func{`0})">
            <summary>
            Initializes a new instance of the property value
            </summary>
            <param name="owner"></param>
            <param name="shortName">the short name that identifies this behaved value</param>
            <param name="_validator">the delegate used to validate the data</param>
            <param name="_factory">the factory used to create a new instance</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String,System.Predicate{`0})">
            <summary>
            Initializes a new instance of the property value
            </summary>
            <param name="owner"></param>
            <param name="shortName">the short name that identifies this behaved value</param>
            <param name="_validator">the delegate used to validate the data</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.#ctor(Microsoft.Moles.Framework.Behaviors.IBehaved,System.String)">
            <summary>
            Initializes a new instance of the property value
            </summary>
            <param name="owner"></param>
            <param name="shortName">the short name that identifies this behaved value</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.TryGetValue(`0@)">
            <summary>
            Tries to get the value if any was assigned.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.GetOrCreateInstanced``1">
            <summary>
            Tries to recover the instanced associated to the value if any;
            otherwise allocates a new instanced, store the instance and returns it.
            </summary>
            <typeparam name="TInstanced"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.GetOrCreateInstanced``1(Microsoft.Moles.Framework.MolesDelegates.Func{``0})">
            <summary>
            Tries to recover the instanced associated to the value if any;
            otherwise allocates a new instanced, store the instance and returns it.
            </summary>
            <typeparam name="TInstanced"></typeparam>
            <param name="instancedFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.ClearValue">
            <summary>
            Clears the value and the 'value set' flag.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.GetGetter">
            <summary>
            Gets the getter method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.GetSetter">
            <summary>
            Gets the setter method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.TryGetValidator(System.Predicate{`0}@)">
            <summary>
            Tries to get the validator delegate
            </summary>
            <param name="validator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.ToString">
            <summary>
            Gets a string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.Value">
            <summary>
            Gets the value of the property. If the value has not been assign,
            the TryGetPropertyValue of the owner behavior is invoked. If that method returns no value,
            a StubPropertyValueMissingException exception is thrown.
            </summary>
            <exception cref="T:Microsoft.Moles.Framework.Behaviors.BehaviorMissingValueException">no value has been assigned and the default behavior has not provided any value.</exception>
            <exception cref="T:Microsoft.Moles.Framework.Behaviors.BehaviorInvalidValueException">a value that violates the validator delegate was returned by the default behavior.</exception>
            <exception cref="T:System.InvalidOperationException">a value that violates the validator was assigned to the property.</exception>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.DebugViewValue">
            <summary>
            Gets an object that is suitable to view in debug mode
            </summary>
            <returns>the value if not null or any; otherwise '???'</returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.Factory">
            <summary>
            Gets or sets the value factory
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.HasValue">
            <summary>
            Gets a value indicating if the value was assigned already.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.InstanceBehavior">
            <summary>
            Gets the instance behavior
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.ShortName">
            <summary>
            Gets the short name of this instance
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehavedValue`1.FullName">
            <summary>
            Gets the full name of this instance
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.Valued">
            <summary>
            Helpers methods for IValued
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.Valued.EnsureHasNoValues(Microsoft.Moles.Framework.Behaviors.IValued[])">
            <summary>
            Ensures that none of the valued instance has a value,
            otherwise throws BehaviorInvalidOperationException
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesEraseStaticConstructorAttribute">
            <summary>
            Attribute that specifices that the static of a given type should be erased.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesEraseStaticConstructorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.MolesEraseStaticConstructorAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesEraseStaticConstructorAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.MolesEraseStaticConstructorAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesEraseStaticConstructorAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.MolesEraseStaticConstructorAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Microsoft.Moles.Framework.MolesEraseStaticConstructorAttribute.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="T:Microsoft.Moles.Framework.MoledTypeAttribute">
            <summary>
            Attribute that specifices which a type for which moles. 
            </summary>
            <remarks>
            This attribute is usually added by the code generator.
            </remarks>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoledTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.MoledTypeAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoledTypeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.MoledTypeAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoledTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.MoledTypeAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Microsoft.Moles.Framework.MoledTypeAttribute.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesContext">
            <summary>
            A class that allows to create a context that defines the lifetime of moles
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesContext.Create">
            <summary>
            Creates a context where moles and detours are reseted when the return disposble is disposed.
            The context MUST be disposed to ensure that are cleaned up after the test.
            </summary>
            <returns>a new context or a null reference if another context was already allocated</returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesContext.ExecuteWithoutMoles(Microsoft.Moles.Framework.MolesDelegates.Action)">
            <summary>
            Executes an action without any moles
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesContext.ExecuteWithoutMoles``1(Microsoft.Moles.Framework.MolesDelegates.Func{``0})">
            <summary>
            Executes an action without any moles
            </summary>
            <param name="func"></param>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegatesTypeAttribute">
            <summary>
            Attributes that specifies a type that contains nested generic delegate types.
            This attribute is intended to suppor the Moles infrastructure.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesDelegatesTypeAttribute.#ctor(System.Type)">
            <summary>
            Instantiates a new instance of the attribute.
            </summary>
            <param name="holderType"></param>
        </member>
        <member name="P:Microsoft.Moles.Framework.MolesDelegatesTypeAttribute.HolderType">
            <summary>
            Gets the holder type definition
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesBitness">
            <summary>
            Supported process bitness
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.MolesBitness.AnyCPU">
            <summary>
            AnyCPU bitness
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.MolesBitness.x86">
            <summary>
            32-bit process
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.MolesBitness.x64">
            <summary>
            64-bit process
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesAssemblySettingsAttribute">
            <summary>
            Attribute that contains assembly wide settings for the Moles execution engine
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.MolesAssemblySettingsAttribute.Diagnostic">
            <summary>
            Gets or sets a value indicating if the Moles engine
            should turn on diagnostic logging.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.MolesAssemblySettingsAttribute.Bitness">
            <summary>
            Gets or sets the desired bitness under which the tests should be executed
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.MolesAssemblySettingsAttribute.SilverlightVersion">
            <summary>
            Gets or sets the SilverlightVersion under test, v3.0 or v4.0
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehaviorPreparationMethodAttribute">
            <summary>
            Tags methods used to prepare behaved types. 
            The method must be visible, static and may have parameters
            in a behaved type. This method should not be generic as it inherits
            the genericity of the enclosing behaved type.
            </summary>
            <remarks>
            This attribute is attached to a method to indicate
            the type that needs to be prepared.
            </remarks>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorPreparationMethodAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.Behaviors.BehaviorPreparationMethodAttribute"/> class.
            </summary>
            <param name="preparedTypeDefinition">Type that needs to be prepared.</param>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehaviorPreparationMethodAttribute.PreparedType">
            <summary>
            Gets the prepared type
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleInvalidOperationException">
            <summary>
            Invalid operation specific to the Moles framework
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleInvalidOperationException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleInvalidOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleInvalidOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="context"></param>
            <param name="info"></param>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleMethodNotBindableException">
            <summary>
            An exception thrown when an interface method could not be bound through the 'Bind' method.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleMethodNotBindableException.#ctor(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleMethodNotBindableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleMethodNotBindableException.Message">
            <summary>
            Gets a detailled error message
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleNamespaceBehaviorClosure">
            <summary>
            A behavior that applies a mole behavior to any member of a given assembly
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleNotInstrumentedException">
            <summary>
            Raised when the moled method needs to be instrumented.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleNotInstrumentedException.#ctor(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="moledMethod"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleNotInstrumentedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleNotInstrumentedException.MoledMethod">
            <summary>
            Gets the target method
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleNotInstrumentedException.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleNotSupportedException">
            <summary>
            Raised when the moled method cannot be instrumented due to limitation of the runtime
            instrumentation.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleNotSupportedException.#ctor(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="moledMethod"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleNotSupportedException.MoledMethod">
            <summary>
            Gets the target method
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleNotSupportedException.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MolesInstrumentAttribute">
            <summary>
            Attribute that specifies that a type or a module should be instrumented
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleTypeDefinitionBehaviorClosure">
            <summary>
            A behavior that applies a mole behavior to any member of a given type
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleAssemblyNameBehaviorClosure">
            <summary>
            A behavior that applies a mole behavior to any member of a given assembly
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Data.MolesSerializer">
            <summary>
            Helper classes to deserialize .moles xml files
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Data.MolesSerializer.Deserialize(System.IO.TextReader)">
            <summary>
            Deserializes the .moles data
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Data.MolesSerializer.Serialize(System.IO.TextWriter,Microsoft.Moles.Data.MolesElement)">
            <summary>
            Serializes the moles to an xml stream
            </summary>
            <param name="writer"></param>
            <param name="moles"></param>
        </member>
        <member name="M:Microsoft.Moles.Data.MolesSerializer.GetHashCode(Microsoft.Moles.Data.MolesElement)">
            <summary>
            Gets a hash code for the moles element
            </summary>
            <param name="moles"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Data.MolesSerializer.TryDeserialize(System.String,Microsoft.Moles.Data.MolesElement@)">
            <summary>
            Tries to deserialize the moles data
            </summary>
            <param name="molesPath"></param>
            <param name="moles"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Engine.MolesDelegatePool">
            <summary>
            A queryable collection of delegate types
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Engine.MolesDelegatePool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Engine.MolesDelegatePool"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleMetadataFast">
            <summary>
            Mole metadata, only metadata always accessed when Pex runs
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleMetadata">
            <summary>
            Mole metadata
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.IUncurryfier">
            <summary>
            A closure that uncurryfies a delegate, untyped
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.IUncurryfier.InnerDelegate">
            <summary>
            Gets the inner delegate
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.IUncurryfier`1">
            <summary>
            A closure that uncurryfies a delegate
            </summary>
            <typeparam name="TDelegate"></typeparam>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.IUncurryfier`1.InnerDelegate">
            <summary>
            The inner delegate
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.Uncurryfier`1">
            <summary>
            Abstract base class for IUncurryfier implementations
            </summary>
            <typeparam name="TDelegate"></typeparam>
        </member>
        <member name="F:Microsoft.Moles.Framework.Moles.Uncurryfier`1.InnerDelegate">
            <summary>
            The inner delegate
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.Uncurryfier`1.#ctor(`0)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="innerDelegate"></param>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.Uncurryfier`1.Microsoft#Moles#Framework#Moles#IUncurryfier{TDelegate}#InnerDelegate">
            <summary>
            Gets the inner delegate
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Stubs.StubMetadata">
            <summary>
            Stubs metadata
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubMetadata.WriteMolesKeyFile(System.String)">
            <summary>
            Writes the stubs key file to the stream
            </summary>
            <param name="writer"></param>
        </member>
        <member name="F:Microsoft.Moles.Framework.Stubs.StubMetadata.Schema">
            <summary>
            the Stubs XSD schema
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubMetadata.EmitDebuggerVisibility(Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder)">
            <summary>
            Emits debugger visibility attributes
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleBehaviorBase">
            <summary>
            Abstract base class for IMoleBehavior implementations
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.IMoleBehavior">
            <summary>
            Defines behavior of moles
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.IMoleBehavior.TryGetMoleMethod(Microsoft.ExtendedReflection.Metadata.Method,System.Delegate@)">
            <summary>
            Tries to get the mole method.
            </summary>
            <param name="method">The method.</param>
            <param name="moleMethod">The mole method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleBehaviorBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the mole behavior
            </summary>
            <param name="assemblyName"></param>
            <param name="typeNameSuffix"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleBehaviorBase.TryGetMoleMethod(Microsoft.ExtendedReflection.Metadata.Method,System.Delegate@)">
            <summary>
            Tries to get the mole for a given method
            </summary>
            <param name="method"></param>
            <param name="moleMethod"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleNotImplementedException">
            <summary>
            An exception thrown when a call was made to a method which was not moled. 
            Change the mole behavior or attach a delegate to the property associated to the moled method.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleNotImplementedException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleNotImplementedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleNotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleNotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleNotImplementedException.Message">
            <summary>
            Gets a detailled error message
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesExtensions">
            <summary>
            Specialized extensions to provide behaviors to stubs and moles
            </summary>
            <summary>
            Specialized extensions to provide behaviors to stubs
            </summary>
            <summary>
            Specialized extensions to provide behaviors to stubs
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``2(Microsoft.Moles.Framework.MolesDelegates.Action{``1})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``3(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``3(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``4(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``4(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``5(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``3(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``4(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``4(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``5(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``3(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``4(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``4(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``5(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``5(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``6(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``4(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``5(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``5(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``6(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``4(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``5(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``5(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``6(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``6(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``7(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``5(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``6(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``6(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``7(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``5(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``6(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``6(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``7(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``7(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``8(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``6(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``7(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``7(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``8(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``6(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``7(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``7(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``8(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``8(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``9(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``7(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``8(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``8(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``9(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``7(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``8(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``8(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``9(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``9(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``10(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``8(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``9(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``9(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``10(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``8(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``9(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``9(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``10(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``10(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``11(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``9(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``10(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``10(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``11(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``9(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``10(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``10(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``11(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``11(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``12(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``10(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``11(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``11(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``12(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``10(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``11(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``11(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``12(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``12(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``13(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``11(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``12(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``12(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``13(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``11(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``12(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``12(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``13(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``13(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``14(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``12(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``13(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``13(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``14(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``12(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``13(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``13(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``14(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``14(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``15(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``13(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``14(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``14(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``15(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``13(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``14(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``14(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``15(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``15(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``16(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``14(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``15(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``15(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``16(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``14(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``15(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``15(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``16(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``16(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``17(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``15(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``16(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``16(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``17(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``15(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``16(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``16(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``17(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``17(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``18(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``16(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``17(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``17(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``18(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``16(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``17(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``17(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``18(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``18(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``19(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``17(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``18(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``18(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``19(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``17(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``18(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``18(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``19(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``19(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``20(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``18(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``19(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``19(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``20(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``18(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``19(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``19(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``20(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``20(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``21(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``19(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``20(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``20(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``21(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``19(Microsoft.Moles.Framework.MolesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>         
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``20(Microsoft.Moles.Framework.MolesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                 
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``20(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                         
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``21(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``21(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``22(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``20(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``21(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``21(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``22(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.Cached``1(Microsoft.Moles.Framework.MolesDelegates.Func{``0})">
            <summary>
            Memoizes (caches) the result of the stub
            </summary>         
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.Cached``2(Microsoft.Moles.Framework.MolesDelegates.Func{``0,``1})">
            <summary>
            Memoizes (caches) the result of the stub
            </summary>        /// <typeparam name="T0"></typeparam>         
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``1(Microsoft.Moles.Framework.MolesDelegates.Action)">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        
            <param name="action">the delegate to uncurryfy</param>
            <returns>
            a delegate that invokes <paramref name="action" /> by dropping the first argument;
            if action is a null reference, returns null.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``2(Microsoft.Moles.Framework.MolesDelegates.Func{``1})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>              
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            if func is a null reference, returns null.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``2(Microsoft.Moles.Framework.MolesDelegates.OutAction{``1})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            if action is a nullreference, returns null
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``3(Microsoft.Moles.Framework.MolesDelegates.OutOutAction{``1,``2})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            if action is a nullreference, returns null
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``3(Microsoft.Moles.Framework.MolesDelegates.OutFunc{``1,``2})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return null if func is null
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``4(Microsoft.Moles.Framework.MolesDelegates.OutOutFunc{``1,``2,``3})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return null if func is null
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``2(Microsoft.Moles.Framework.MolesDelegates.RefAction{``1})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return null if action is null.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``3(Microsoft.Moles.Framework.MolesDelegates.RefRefAction{``1,``2})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return null if action is null.
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``3(Microsoft.Moles.Framework.MolesDelegates.RefFunc{``1,``2})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return null if func is null
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.UnCurry``4(Microsoft.Moles.Framework.MolesDelegates.RefRefFunc{``1,``2,``3})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return null if func is null
            </returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.Cached``3(Microsoft.Moles.Framework.MolesDelegates.Func{``0,``1,``2})">
            <summary>
            Caches the result of the stub
            </summary>        /// <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>         
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.Cached``4(Microsoft.Moles.Framework.MolesDelegates.Func{``0,``1,``2,``3})">
            <summary>
            Caches the result of the stub
            </summary>        /// <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>         
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.Cached``5(Microsoft.Moles.Framework.MolesDelegates.Func{``0,``1,``2,``3,``4})">
            <summary>
            Caches the result of the stub
            </summary>        /// <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>         
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.Cached``6(Microsoft.Moles.Framework.MolesDelegates.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Caches the result of the stub
            </summary>        /// <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>         
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.Cached``7(Microsoft.Moles.Framework.MolesDelegates.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Caches the result of the stub
            </summary>        /// <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>         
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.Cached``8(Microsoft.Moles.Framework.MolesDelegates.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Caches the result of the stub
            </summary>        /// <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>         
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.Cached``9(Microsoft.Moles.Framework.MolesDelegates.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Caches the result of the stub
            </summary>        /// <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>         
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MolesExtensions.Cached``10(Microsoft.Moles.Framework.MolesDelegates.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Caches the result of the stub
            </summary>        /// <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>         
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleRuntime">
            <summary>
            Mole runtime method
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.CreateContext">
            <summary>
            Creates a context where moles and detours are reseted when the return disposble is disposed.
            The context MUST be disposed to ensure that are cleaned up after the test.
            </summary>
            <returns>a new context or a null reference if another context was already allocated</returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.CreateUninitializedInstance(System.Type)">
            <summary>
            Gets an uninitialized instance of the mole type (i.e. no constructor were run)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.CreateUninitializedInstance``1">
            <summary>
            Gets an uninitialized instance of the mole type (i.e. no constructor were run)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.RegisterStateCleaner(Microsoft.Moles.Framework.MolesDelegates.Action)">
            <summary>
            Registers a delegate that should be executed when the context is disposed
            </summary>
            <param name="stateCleaner"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance(System.Delegate,System.Type,System.Object,System.String,System.Type[])">
            <summary>
            Sets the stub for public instance method
            </summary>
            <param name="_stub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="_receiver">The receiver if any</param>
            <param name="name">The name.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetMoleNonPublicInstance(System.Delegate,System.Type,System.Object,System.String,System.Type[])">
            <summary>
            Sets the stub for non public instance method
            </summary>
            <param name="_stub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="_receiver">The receiver if specified</param>
            <param name="name">The name.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicStatic(System.Delegate,System.Type,System.String,System.Type[])">
            <summary>
            Sets the stub for public instance method
            </summary>
            <param name="_stub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="name">The name.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetMoleNonPublicStatic(System.Delegate,System.Type,System.String,System.Type[])">
            <summary>
            Sets the stub for non public instance method
            </summary>
            <param name="_stub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="name">The name.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetMole(System.Delegate,System.Type,System.Object,System.String,Microsoft.Moles.Framework.Moles.MoleBindingFlags,System.Type[])">
            <summary>
            Sets the stub
            </summary>
            <param name="_stub">The stub, may be null.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="_receiver">The receiver</param>
            <param name="name">The name.</param>
            <param name="flags">The flags.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetGenericMolePublicInstance(System.Delegate,System.Type,System.Object,System.String,System.Type[],System.Type[])">
            <summary>
            Sets the stub for a public instance generic method
            </summary>
            <param name="_stub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="_receiver">The receiver if specified</param>
            <param name="name">The name.</param>
            <param name="genericMethodArguments">The generic method type arguments.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetGenericMolePublicStatic(System.Delegate,System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Sets the stub for a public static generic method
            </summary>
            <param name="_stub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="name">The name.</param>
            <param name="genericMethodArguments">The generic method type arguments.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetGenericMoleNonPublicInstance(System.Delegate,System.Type,System.Object,System.String,System.Type[],System.Type[])">
            <summary>
            Sets the stub for a non public instance generic method
            </summary>
            <param name="_stub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="_receiver"></param>
            <param name="name">The name.</param>
            <param name="genericMethodArguments">The generic method type arguments.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetGenericMoleNonPublicStatic(System.Delegate,System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Sets the stub for a non public static generic method
            </summary>
            <param name="_stub">The stub.</param>
            <param name="receiverType">the type of the receiver</param>
            <param name="name">The name.</param>
            <param name="genericMethodArguments">The generic method type arguments.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetGenericMole(System.Delegate,System.Type,System.Object,System.String,Microsoft.Moles.Framework.Moles.MoleBindingFlags,System.Type[],System.Type[])">
            <summary>
            Sets the stub using
            </summary>
            <param name="_stub">The stub.</param>
            <param name="receiverType">the type of the receiver</param>
            <param name="_receiver">the receiver if any</param>
            <param name="name">The name.</param>
            <param name="flags">The flags.</param>
            <param name="genericMethodArguments">The generic method type arguments.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetMole(System.Delegate,System.Object,System.Reflection.MethodInfo)">
            <summary>
            Sets a mole for a given method.
            </summary>
            <param name="_stub"></param>
            <param name="_receiver"></param>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.GetMole(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Gets the mole for a given method, if any.
            </summary>
            <param name="_receiver"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.SetMoleMethod(System.Delegate,System.Object,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Sets a stub for a given method. Must be run under a protected context.
            </summary>
            <param name="_stub"></param>
            <param name="_receiver">the receiver if specified</param>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.GetMoleMethod(System.Object,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Gets a stub for a given method. Must be run under a protected context.
            </summary>
            <param name="_receiver">the receiver if specified</param>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.ClearCache">
            <summary>
            Clears internal caches
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.Clear">
            <summary>
            Clears any cached mole instances
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.Bind``3(``1,``2)">
            <summary>
            Binds the members of an interface to mole redirections
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.AttachBehavior(Microsoft.Moles.Framework.Moles.MoleInstanceBehaviorClosure@,System.Object,Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.Moles.Framework.Moles.IMoleBehavior)">
            <summary>
            Registers the behavior for a given mole instance
            </summary>
            <param name="_behavior"></param>
            <param name="receiver"></param>
            <param name="_targetType">specifies the type if the behavior should only apply to methods from that type</param>
            <param name="moleBehavior"></param>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleRuntime.HasContext">
            <summary>
            Gets a value indicating if a context is enaled
            </summary>
        </member>
        <member name="E:Microsoft.Moles.Framework.Moles.MoleRuntime.MoledMethod">
            <summary>
            Rased when a method is moled with a delegate
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.BindCompiler.RegisterDelegates(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            collects the delegates generated for that assembly
            that will be needed for Bind
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleRuntime.BindCompiler.UnCurryDelegate(System.Delegate,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Uncurries a delegate based on it's signature
            </summary>
            <param name="delegate"></param>
            <param name="receiverType">receiver type to uncurry</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Framework.Stubs.StubClassAttribute">
            <summary>
            Attribute that specifies the target type of a stub class.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubClassAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.Stubs.StubClassAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="P:Microsoft.Moles.Framework.Stubs.StubClassAttribute.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="T:Microsoft.Moles.Engine.IMolesMetadataManager">
            <summary>
            A manager for mole metadata
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesMetadataManager.AddMolesAssembly(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Adds the stub and mole types from an assembly
            </summary>
            <param name="assembly"></param>
            <returns>true if the assembly was added; false if it was already added</returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesMetadataManager.AddMoleType(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Registers a mole type pair
            </summary>
            <param name="typeDefinition"></param>
            <param name="moleTypeDefinition"></param>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesMetadataManager.AddStubType(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Registers a type to stub type pair
            </summary>
            <param name="typeDefinition"></param>
            <param name="stubTypeDefinition"></param>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesMetadataManager.AddBehavedType(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Registers a type to behaved type pair
            </summary>
            <param name="typeDefinition"></param>
            <param name="behavedTypeDefinition"></param>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesMetadataManager.AddPreparationMethod(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Adds a preparation method for a given type
            </summary>
            <param name="preparedType"></param>
            <param name="preparationMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesMetadataManager.TryGetMoleType(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition@)">
            <summary>
            Tries to get the mole type.
            </summary>
            <param name="typeDefinition">The typeDefinition.</param>
            <param name="moleTypeDefinition">The mole type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesMetadataManager.TryGetStubType(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition@)">
            <summary>
            Tries to get the stub type for a given type
            </summary>
            <param name="typeDefinition"></param>
            <param name="stubTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesMetadataManager.TryGetBehavedType(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition@)">
            <summary>
            Tries to get the behaved type for a given type
            </summary>
            <param name="typeDefinition"></param>
            <param name="behavedTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesMetadataManager.TryGetPreparationMethod(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition@)">
            <summary>
            Tries to get the preparation method of a given type
            </summary>
            <param name="typeDefinition"></param>
            <param name="preparationMethod"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Engine.IMolesDelegateManager">
            <summary>
            A manager for Stubs supported delegate types
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Engine.IMolesDelegateManager.TryGetDelegateType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,System.Boolean,Microsoft.ExtendedReflection.Metadata.Interfaces.IType@,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod@)">
            <summary>
            Tries the type of the get delegate.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <param name="method">The method.</param>
            <param name="useThisParameter">if set to <c>true</c> [use this parameter].</param>
            <param name="delegateType">Type of the delegate.</param>
            <param name="invokeDelegateMethod">The invoke delegate method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Framework.Stubs.IPartialStub">
            <summary>
            A stubs that inherits from an concrete class and overrides virtual methods
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Stubs.IStub">
            <summary>
            A stub type.
            </summary>
            <remarks>
            <para>
            All generated stubs implement this interface which provides
            a 'default' behavior service, through the <see cref="T:Microsoft.Moles.Framework.BehavedBehaviors"/> property.
            </para>
            <para>
            When a method that is not stubbed is called, the current default stub is used.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Moles.Framework.Stubs.IPartialStub.CallBase">
            <summary>
            Gets or sets a value indicating whether the stub should call the base class method
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.IBehavior">
            <summary>
            An object that provides the default behavior of stubbed members
            that have not been redefined.
            </summary>
            <remarks>
            A default stub can be attached
            to a stub through the <see cref="P:Microsoft.Moles.Framework.Behaviors.IBehaved.InstanceBehavior"/>
            property.
            </remarks>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.IBehavior.TryGetValue``1(System.Object,``0@)">
            <summary>
            Gets the default property value when a backing filed is attached to a property
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">name of the instance.</param>
            <param name="value">The value.</param>
            <returns>true if a value should be attached to the property</returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.IBehavior.Result``2(``0,System.String)">
            <summary>
            Gets the default result value of a stubbed method
            </summary>
            <typeparam name="TBehaved">The type of the stub.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="target">Stub instance, may be null for static methods.</param>
            <param name="name">name of the value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.IBehavior.ValueAtReturn``2(``0,System.String,``1@)">
            <summary>
            Gets the value of an out parameter
            </summary>
            <typeparam name="TBehaved">The type of the stub.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="target">the stub instance</param>
            <param name="name">the name of the choice</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.IBehavior.ValueAtEnterAndReturn``2(``0,System.String,``1@)">
            <summary>
            Gets or sets the value of a ref parameter
            </summary>
            <typeparam name="TBehaved">The type of the stub.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="target">The stub.</param>
            <param name="name">The name of the choice</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.IBehavior.VoidResult``1(``0,System.String)">
            <summary>
            Executes the default behavior of a stubbed method
            </summary>
            <typeparam name="TBehaved">The type of the stub.</typeparam>
            <param name="target">Stub instance, may be null for static methods.</param>
            <param name="name">name of the choice</param>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleBindingFlags">
            <summary>
            Shortcuts for Binding flags
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance">
            <summary>
            Public instance bindings
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicStatic">
            <summary>
            Public static bindings
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Moles.MoleBindingFlags.NonPublicInstance">
            <summary>
            Non public static bindings
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Moles.MoleBindingFlags.NonPublicStatic">
            <summary>
            Non public static bindings
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleBase">
            <summary>
            Base class for all Mole implementations
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.Moles.MoleBase"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleBase.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleBase.TargetTypeEx">
            <summary>
            Gets the type of the target
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleBase`1">
            <summary>
            Strongly typed base class for moles of reference types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleBase`1.#ctor">
            <summary>
            Initializes the instance
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleBase`1.#ctor(`0)">
            <summary>
            Initializes the mole with an instance
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleBase`1.GetInstance">
            <summary>
            Internal method used when binding mole methods
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleBase`1.op_Implicit(Microsoft.Moles.Framework.Moles.MoleBase{`0})~`0">
            <summary>
            Implicit operator conversion to the moled type
            </summary>
            <param name="mole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleBase`1.BehaveAsNotImplemented">
            <summary>
            Assign the NotImplemented behavior to the current instance
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleBase`1.BehaveAsDefaultValue">
            <summary>
            Assign the Default behavior to the current instance.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleBase`1.Instance">
            <summary>
            Gets the runtime instance associated to the mole type.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleBase`1.IsInstanceOwned">
            <summary>
            Gets a value that indicates the mole owns this instance.
            If true, the instance behavior should apply to all methods applied on this instance,
            if false, only method from type T will have the behavior
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleBase`1.InstanceBehavior">
            <summary>
            Gets the mole fallback behavior for the current instance
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleClassAttribute">
            <summary>
            Attribute that specifies the target type of a mole class.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleClassAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.Moles.MoleClassAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleClassAttribute.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="T:Microsoft.Moles.Framework.MoleBehaviors">
            <summary>
            A static class holding the global mole behavior
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.BehaveAsNotImplemented">
            <summary>
            Assigns the 'not implemented' behavior as
            the default behavior
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.BehaveAsNotImplemented(System.Type)">
            <summary>
            Assigns the 'not implemented' behavior as
            the behavior of type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.BehaveAsDefaultValue">
            <summary>
            Assign the 'default value' behavior as the default behavior
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.BehaveAsDefaultValue(System.Type)">
            <summary>
            Assigns the 'default value' behavior as
            the behavior of type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.BehaveAsFallthrough">
            <summary>
            Assign the 'fallthrough' behavior as the default behavior
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.BehaveAsFallthrough(System.Type)">
            <summary>
            Assigns the 'fallthrough' behavior as
            the behavior of type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.AttachToAssembly(System.Type,Microsoft.Moles.Framework.Moles.IMoleBehavior)">
            <summary>
            Sets the behavior for all members of the assembly
            containing the type <paramref name="type"/>.
            Returns an instance that controls the lifetime of the behavior.
            </summary>
            <param name="type">type of the assembly</param>
            <param name="behavior"></param>
            <returns>instance that can be used to detach the behavior</returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.AttachToAssembly(System.Reflection.Assembly,Microsoft.Moles.Framework.Moles.IMoleBehavior)">
            <summary>
            Sets the behavior for all members of an assembly.
            Returns an instance that controls the lifetime of the behavior.
            </summary>
            <param name="assembly"></param>
            <param name="behavior"></param>
            <returns>instance that can be used to detach the behavior</returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.AttachToAssembly(System.Reflection.AssemblyName,Microsoft.Moles.Framework.Moles.IMoleBehavior)">
            <summary>
            Sets the behavior for all members of an assembly.
            Returns an instance that controls the lifetime of the behavior.
            </summary>
            <param name="assembly"></param>
            <param name="behavior"></param>
            <returns>instance that can be used to detach the behavior</returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.AttachToNamespace(System.Type,System.String,Microsoft.Moles.Framework.Moles.IMoleBehavior)">
            <summary>
            Sets the behavior for all members of the assembly containing typeOfAssembly under a specific namespace,
            using a case-sensitive full match.
            Returns an instance that controls the lifetime of the behavior.
            </summary>
            <param name="typeOfAssembly"></param>
            <param name="namespace">the namespace</param>
            <param name="behavior"></param>
            <returns>instance that can be used to detach the behavior</returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.AttachToNamespace(System.Reflection.Assembly,System.String,Microsoft.Moles.Framework.Moles.IMoleBehavior)">
            <summary>
            Sets the behavior for all members of an assembly under a specific namespace,
            using a case-sensitive full match.
            Returns an instance that controls the lifetime of the behavior.
            </summary>
            <param name="assembly"></param>
            <param name="namespace">the namespace</param>
            <param name="behavior"></param>
            <returns>instance that can be used to detach the behavior</returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.AttachToNamespace(System.Reflection.AssemblyName,System.String,Microsoft.Moles.Framework.Moles.IMoleBehavior)">
            <summary>
            Sets the behavior for all members of an assembly under a specific namespace,
            using a case-sensitive full match.
            Returns an instance that controls the lifetime of the behavior.
            </summary>
            <param name="assembly"></param>
            <param name="namespace">the namespace</param>
            <param name="behavior"></param>
            <returns>instance that can be used to detach the behavior</returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoleBehaviors.AttachToType(System.Type,Microsoft.Moles.Framework.Moles.IMoleBehavior)">
            <summary>
            Sets the behavior for all members of a type.
            Returns an instance that controls the lifetime of the behavior.
            </summary>
            <param name="type"></param>
            <param name="behavior"></param>
            <returns>instance that can be used to detach the behavior</returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.MoleBehaviors.DefaultValue">
            <summary>
            Gets a mole behavior that return the default value or null and assign out parameter to their default values.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.MoleBehaviors.NotImplemented">
            <summary>
            Gets a mole behavior that throws a MoleNotImplementedException.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.MoleBehaviors.Fallthrough">
            <summary>
            Get a behavior that calls into the original implementation when no delegate is provided.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.MoleBehaviors.Current">
            <summary>
            Gets or sets the current default mole behavior. This instance
            is used to intialize any new mole instance.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.MoleBehaviors.CurrentProxy">
            <summary>
            Gets a mole behavior that always queries the Current property
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleMethodAttribute">
            <summary>
            Specifies a mole method target
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleMethodAttribute.#ctor(System.String,Microsoft.Moles.Framework.Moles.MoleBindingFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.Moles.MoleMethodAttribute"/> class.
            </summary>
            <param name="shortName">The short name.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleMethodAttribute.ShortName">
            <summary>
            Gets the short name.
            </summary>
            <value>The short name.</value>
        </member>
        <member name="P:Microsoft.Moles.Framework.Moles.MoleMethodAttribute.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Microsoft.Moles.Framework.Moles.MoleOutdatedException">
            <summary>
            An exception thrown when a method inside a mole could not be resolved.
            This happens when the Mole file gets out of date and needs to be regenerated.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleOutdatedException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleOutdatedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleOutdatedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Moles.MoleOutdatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Stubs.StubBase">
            <summary>
            Abstract base class for <see cref="T:Microsoft.Moles.Framework.Stubs.IStub"/> implementations.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.Stubs.StubBase"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates">
            <summary>
            A repository of stub delegate signatures.
            </summary>
            <remarks>
            The stub framework currently only supports
            the method signature covered by the delegate nested in <see cref="T:Microsoft.Moles.Framework.MolesDelegates"/>.
            This includes methods with up to 10 parameter with or without return value,
            with or without a out/ref parameter as the last parameter.
            Pointers are not supported.
            </remarks>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action">
            <summary>
            An action that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`1">
            <summary>
            An action that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`2">
            <summary>
            An action that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`3">
            <summary>
            An action that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`4">
            <summary>
            An action that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`5">
            <summary>
            An action that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`6">
            <summary>
            An action that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`7">
            <summary>
            An action that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`8">
            <summary>
            An action that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`9">
            <summary>
            An action that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`10">
            <summary>
            An action that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`11">
            <summary>
            An action that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`12">
            <summary>
            An action that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`13">
            <summary>
            An action that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`14">
            <summary>
            An action that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`15">
            <summary>
            An action that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`16">
            <summary>
            An action that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`17">
            <summary>
            An action that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`18">
            <summary>
            An action that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Action`19">
            <summary>
            An action that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`1">
            <summary>
            An action that takes one out argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`2">
            <summary>
            An action that takes two out argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`2">
            <summary>
            An aciont that takes one out argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`3">
            <summary>
            An action that takes two out arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`3">
            <summary>
            An action with a out parameter that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`4">
            <summary>
            An action with two out parameters that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`4">
            <summary>
            An action with a out parameter that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`5">
            <summary>
            An action with two out parameters that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`5">
            <summary>
            An action with a out parameter that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`6">
            <summary>
            An action with two out parameters that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`6">
            <summary>
            An action with a out parameter that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`7">
            <summary>
            An action with two out parameters that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`7">
            <summary>
            An action with a out parameter that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`8">
            <summary>
            An action with two out parameters that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`8">
            <summary>
            An action with a out parameter that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`9">
            <summary>
            An action with two out parameters that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`9">
            <summary>
            An action with a out parameter that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`10">
            <summary>
            An action with two out parameters that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`10">
            <summary>
            An action with a out parameter that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`11">
            <summary>
            An action with two out parameters that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`11">
            <summary>
            An action with a out parameter that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`12">
            <summary>
            An action with two out parameters that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`12">
            <summary>
            An action with a out parameter that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`13">
            <summary>
            An action with two out parameters that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`13">
            <summary>
            An action with a out parameter that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`14">
            <summary>
            An action with two out parameters that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`14">
            <summary>
            An action with a out parameter that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`15">
            <summary>
            An action with two out parameters that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`15">
            <summary>
            An action with a out parameter that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`16">
            <summary>
            An action with two out parameters that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`16">
            <summary>
            An action with a out parameter that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`17">
            <summary>
            An action with two out parameters that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`17">
            <summary>
            An action with a out parameter that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`18">
            <summary>
            An action with two out parameters that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`18">
            <summary>
            An action with a out parameter that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`19">
            <summary>
            An action with two out parameters that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`19">
            <summary>
            An action with a out parameter that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`20">
            <summary>
            An action with two out parameters that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutAction`20">
            <summary>
            An action with a out parameter that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutAction`21">
            <summary>
            An action with two out parameters that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`1">
            <summary>
            An action with a ref parameter  that takes no argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`2">
            <summary>
            An action with two ref parameters that takes no argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`2">
            <summary>
            An action with a ref parameter  that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`3">
            <summary>
            An action with two ref parameters that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`3">
            <summary>
            An action with a ref parameter that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`4">
            <summary>
            An action with two ref parameters that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`4">
            <summary>
            An action with a ref parameter that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`5">
            <summary>
            An action with two ref parameters that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`5">
            <summary>
            An action with a ref parameter that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`6">
            <summary>
            An action with two ref parameters that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`6">
            <summary>
            An action with a ref parameter that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`7">
            <summary>
            An action with two ref parameters that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`7">
            <summary>
            An action with a ref parameter that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`8">
            <summary>
            An action with two ref parameters that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`8">
            <summary>
            An action with a ref parameter that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`9">
            <summary>
            An action with two ref parameters that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`9">
            <summary>
            An action with a ref parameter that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`10">
            <summary>
            An action with two ref parameters that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`10">
            <summary>
            An action with a ref parameter that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`11">
            <summary>
            An action with two ref parameters that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`11">
            <summary>
            An action with a ref parameter that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`12">
            <summary>
            An action with two ref parameters that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`12">
            <summary>
            An action with a ref parameter that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`13">
            <summary>
            An action with two ref parameters that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`13">
            <summary>
            An action with a ref parameter that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`14">
            <summary>
            An action with two ref parameters that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`14">
            <summary>
            An action with a ref parameter that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`15">
            <summary>
            An action with two ref parameters that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`15">
            <summary>
            An action with a ref parameter that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`16">
            <summary>
            An action with two ref parameters that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`16">
            <summary>
            An action with a ref parameter that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`17">
            <summary>
            An action with two ref parameters that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`17">
            <summary>
            An action with a ref parameter that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`18">
            <summary>
            An action with two ref parameters that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`18">
            <summary>
            An action with a ref parameter that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`19">
            <summary>
            An action with two ref parameters that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`19">
            <summary>
            An action with a ref parameter that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`20">
            <summary>
            An action with two ref parameters that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefAction`20">
            <summary>
            An action with a ref parameter that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefAction`21">
            <summary>
            An action with two ref parameters that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`1">
            <summary>
            An Function that takes no arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`2">
            <summary>
            An Function that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`3">
            <summary>
            A function that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`4">
            <summary>
            A function that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`5">
            <summary>
            A function that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`6">
            <summary>
            A function that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`7">
            <summary>
            A function that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`8">
            <summary>
            A function that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`9">
            <summary>
            A function that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`10">
            <summary>
            A function that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`11">
            <summary>
            A function that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`12">
            <summary>
            A function that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`13">
            <summary>
            A function that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`14">
            <summary>
            A function that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`15">
            <summary>
            A function that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`16">
            <summary>
            A function that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`17">
            <summary>
            A function that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`18">
            <summary>
            A function that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`19">
            <summary>
            A function that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.Func`20">
            <summary>
            A function that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`2">
            <summary>
            An OutFunction that takes no arguments and 1 out argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`3">
            <summary>
            An OutFunction that takes no arguments and two out arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`3">
            <summary>
            An OutFunction that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`4">
            <summary>
            An OutFunction that takes two out arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`4">
            <summary>
            A function with an out parameter that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`5">
            <summary>
            A function with an out parameter that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`5">
            <summary>
            A function with an out parameter that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`6">
            <summary>
            A function with an out parameter that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`6">
            <summary>
            A function with an out parameter that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`7">
            <summary>
            A function with an out parameter that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`7">
            <summary>
            A function with an out parameter that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`8">
            <summary>
            A function with an out parameter that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`8">
            <summary>
            A function with an out parameter that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`9">
            <summary>
            A function with an out parameter that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`9">
            <summary>
            A function with an out parameter that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`10">
            <summary>
            A function with an out parameter that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`10">
            <summary>
            A function with an out parameter that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`11">
            <summary>
            A function with an out parameter that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`11">
            <summary>
            A function with an out parameter that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`12">
            <summary>
            A function with an out parameter that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`12">
            <summary>
            A function with an out parameter that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`13">
            <summary>
            A function with an out parameter that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`13">
            <summary>
            A function with an out parameter that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`14">
            <summary>
            A function with an out parameter that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`14">
            <summary>
            A function with an out parameter that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`15">
            <summary>
            A function with an out parameter that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`15">
            <summary>
            A function with an out parameter that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`16">
            <summary>
            A function with an out parameter that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`16">
            <summary>
            A function with an out parameter that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`17">
            <summary>
            A function with an out parameter that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`17">
            <summary>
            A function with an out parameter that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`18">
            <summary>
            A function with an out parameter that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`18">
            <summary>
            A function with an out parameter that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`19">
            <summary>
            A function with an out parameter that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`19">
            <summary>
            A function with an out parameter that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`20">
            <summary>
            A function with an out parameter that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`20">
            <summary>
            A function with an out parameter that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`21">
            <summary>
            A function with an out parameter that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutFunc`21">
            <summary>
            A function with an out parameter that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.OutOutFunc`22">
            <summary>
            A function with an out parameter that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`2">
            <summary>
            An function with a ref parameter that takes no argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`3">
            <summary>
            An function with two ref parameters that takes no argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`3">
            <summary>
            An function with a ref parameter that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`4">
            <summary>
            An function with two ref parameters that takes one argument
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`4">
            <summary>
            A function with a ref parameter that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`5">
            <summary>
            A function with two ref parameters that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`5">
            <summary>
            A function with a ref parameter that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`6">
            <summary>
            A function with two ref parameters that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`6">
            <summary>
            A function with a ref parameter that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`7">
            <summary>
            A function with two ref parameters that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`7">
            <summary>
            A function with a ref parameter that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`8">
            <summary>
            A function with two ref parameters that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`8">
            <summary>
            A function with a ref parameter that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`9">
            <summary>
            A function with two ref parameters that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`9">
            <summary>
            A function with a ref parameter that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`10">
            <summary>
            A function with two ref parameters that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`10">
            <summary>
            A function with a ref parameter that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`11">
            <summary>
            A function with two ref parameters that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`11">
            <summary>
            A function with a ref parameter that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`12">
            <summary>
            A function with two ref parameters that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`12">
            <summary>
            A function with a ref parameter that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`13">
            <summary>
            A function with two ref parameters that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`13">
            <summary>
            A function with a ref parameter that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`14">
            <summary>
            A function with two ref parameters that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`14">
            <summary>
            A function with a ref parameter that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`15">
            <summary>
            A function with two ref parameters that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`15">
            <summary>
            A function with a ref parameter that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`16">
            <summary>
            A function with two ref parameters that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`16">
            <summary>
            A function with a ref parameter that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`17">
            <summary>
            A function with two ref parameters that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`17">
            <summary>
            A function with a ref parameter that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`18">
            <summary>
            A function with two ref parameters that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`18">
            <summary>
            A function with a ref parameter that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`19">
            <summary>
            A function with two ref parameters that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`19">
            <summary>
            A function with a ref parameter that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`20">
            <summary>
            A function with two ref parameters that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`20">
            <summary>
            A function with a ref parameter that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`21">
            <summary>
            A function with two ref parameters that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefFunc`21">
            <summary>
            A function with a ref parameter that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MolesDelegates.RefRefFunc`22">
            <summary>
            A function with two ref parameters that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Stubs.StubDictionary">
            <summary>
            A lightweight dictionary of delegates, used to store stubs of generic methods.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubDictionary.TryGetValue``1(``0@)">
            <summary>
            Tries to get the delegate for a given type
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubDictionary.One(System.Delegate)">
            <summary>
            Creates a dictionary with one element
            </summary>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubDictionary.Concat(Microsoft.Moles.Framework.Stubs.StubDictionary,System.Delegate)">
            <summary>
            Combines the @delegate into the existing dictionary dic
            and returns a new copy.
            </summary>
            <param name="dic"></param>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Framework.Stubs.StubDictionary.State">
            <summary>
            To avoid allocating a dictionary of delegates, 
            we use the same field to store different 'collections
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Stubs.StubDictionary.State.Empty">
            <summary>
            No delegate is stored
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Stubs.StubDictionary.State.One">
            <summary>
            A single delegate is stored
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Stubs.StubDictionary.State.Dictionary">
            <summary>
            A dictionary of delegates is stored
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.BehavedBehaviors">
            <summary>
            Common behaviors for behaved types.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Moles.Framework.Behaviors.IBehavior"/> instance define the
            default behavior of stubbed method and properties when those members
            have not been redefined by the user.
            </remarks>
        </member>
        <member name="M:Microsoft.Moles.Framework.BehavedBehaviors.BehaveAsNotImplemented">
            <summary>
            Assigns the 'not implemented' behavior as
            the default behavior
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.BehavedBehaviors.GetValueOrCurrent(Microsoft.Moles.Framework.Behaviors.IBehavior)">
            <summary>
            Returns <paramref name="behavior"/> if not null,
            the value of Current otherwise.
            </summary>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Moles.Framework.BehavedBehaviors.DefaultValue">
            <summary>
            Gets a default stub that always return the default type value (null, 0, etc...)
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.BehavedBehaviors.NotImplemented">
            <summary>
            Gets a default stub that always throws a 
            <see cref="T:Microsoft.Moles.Framework.Behaviors.BehaviorNotImplementedException"/> exception
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.BehavedBehaviors.Current">
            <summary>
            Gets orsets the current default stub implementation. This instance
            is used to intialize any stub instance.
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.BehavedBehaviors.CurrentProxy">
            <summary>
            Gets a proxy that always queries the current behaved behavior
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehaviorNotImplementedException">
            <summary>
            An exception thrown when a call was made to a method
            which was not stubbed. 
            Change the behavior or attach a delegate to
            the property associated to the stubbed method.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorNotImplementedException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorNotImplementedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorNotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorNotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehaviorNotImplementedException.Message">
            <summary>
            Gets a detailled error message
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Behaviors.BehaviorMissingValueException">
            <summary>
            An exception raised when a value was not missing from the stub, mole or behaved
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorMissingValueException.#ctor(Microsoft.Moles.Framework.Behaviors.INamed)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorMissingValueException.#ctor(Microsoft.Moles.Framework.Behaviors.INamed,System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorMissingValueException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorMissingValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorMissingValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Behaviors.BehaviorMissingValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Behaviors.BehaviorMissingValueException.Message">
            <summary>
            Gets a detailled error message
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.MoledAssemblyAttribute">
            <summary>
            Attribute that specifices an assembly for which Moles will be required. 
            </summary>
            <remarks>
            This attribute is usually automatically added by the code generator.
            </remarks>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoledAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="typeOfAssembly">type of the stubbed assembly</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.MoledAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="P:Microsoft.Moles.Framework.MoledAssemblyAttribute.AssemblyName">
            <summary>
            Gets the assembly name
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Framework.Stubs.StubValueHolder`1">
            <summary>
            A simple value holder
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.Moles.Framework.Stubs.StubValueHolder`1.Value">
            <summary>
            the value
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubValueHolder`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Moles.Framework.Stubs.StubValueHolder`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubValueHolder`1.GetGetter">
            <summary>
            Gets the getter method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubValueHolder`1.GetSetter">
            <summary>
            Gets the setter method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubValueHolder`1.GetValue">
            <summary>
            Gets this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Stubs.StubValueHolder`1.SetValue(`0)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Microsoft.Moles.Framework.Instances.InstancedNamedValueBagDebugView">
            <summary>
            Helper type to display a set of named 'valued' instances.
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedNamedValueBagDebugView.Create(System.String,System.String[],System.Object[])">
            <summary>
            Create a new instance of the view
            </summary>
            <param name="name"></param>
            <param name="names"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedNamedValueBagDebugView.Create(Microsoft.Moles.Framework.Behaviors.INamed,System.String[],System.Object[])">
            <summary>
            Create a new instance of the view
            </summary>
            <param name="named"></param>
            <param name="names"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedNamedValueBagDebugView.#ctor(System.String,System.String[],System.Object[])">
            <summary>
            Instantiates a new instance of this class.
            </summary>
            <param name="name"></param>
            <param name="names"></param>
            <param name="values"></param>
        </member>
        <member name="P:Microsoft.Moles.Framework.Instances.InstancedNamedValueBagDebugView.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:Microsoft.Moles.Framework.Instances.InstancedNamedValueBagDebugView.Values">
            <summary>
            Gets the non-null or values that have a value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Framework.Instances.InstancedNamedValueBagDebugView.NamedValue">
            <summary>
            A debugger view friendly name value pair
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Instances.InstancedNamedValueBagDebugView.NamedValue.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Framework.Instances.InstancedNamedValueBagDebugView.NamedValue.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Framework.Instances.InstancedNamedValueBagDebugView.NamedValue.#ctor(System.String,System.Object)">
            <summary>
            Instantiates a new pair
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
    </members>
</doc>
